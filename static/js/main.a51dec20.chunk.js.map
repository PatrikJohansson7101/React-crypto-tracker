{"version":3,"sources":["Coin.js","App.js","reportWebVitals.js","index.js"],"names":["Coin","name","image","symbol","price","volume","priceChange","marketcap","className","src","alt","toLocaleString","toFixed","App","useState","coins","setCoins","search","setSearch","useEffect","axios","get","then","res","data","console","log","catch","error","filteredCoins","filter","coin","toLowerCase","includes","type","placeholder","onChange","e","target","value","map","market_cap","current_price","price_change_percentage_24h","total_volume","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA2CeA,EAzCF,SAAC,GAAD,IACXC,EADW,EACXA,KAAMC,EADK,EACLA,MAAOC,EADF,EACEA,OAAQC,EADV,EACUA,MAAOC,EADjB,EACiBA,OAAQC,EADzB,EACyBA,YAAaC,EADtC,EACsCA,UADtC,OAGX,qBAAKC,UAAU,iBAAf,SACE,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,OAAf,UACE,qBAAKC,IAAKP,EAAOQ,IAAI,WACrB,6BAAKT,IACL,mBAAGO,UAAU,cAAb,SAA4BL,OAE9B,sBAAKK,UAAU,YAAf,UACE,oBAAGA,UAAU,aAAb,cAEGJ,KAEH,oBAAGI,UAAU,cAAb,cAEGH,EAAOM,oBAETL,EAAc,EACb,oBAAGE,UAAU,kBAAb,UACIF,EAAYM,QAAQ,GADxB,OAKA,oBAAGJ,UAAU,oBAAb,UACGF,EAAYM,QAAQ,GADvB,OAKF,oBAAGJ,UAAU,iBAAb,UACG,IADH,aAGGD,EAAUI,6BCiBNE,MA7Cf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRC,IAAMC,IAAI,4HACPC,MAAK,SAACC,GACLP,EAASO,EAAIC,MACbC,QAAQC,IAAIH,EAAIC,SACfG,OAAM,SAACC,GAAD,OAAWH,QAAQC,IAAIE,QACjC,IAEH,IAKMC,EAAgBd,EACnBe,QAAO,SAACC,GAAD,OAAUA,EAAK9B,KAAK+B,cACzBC,SAAShB,EAAOe,kBAErB,OACE,sBAAKxB,UAAU,WAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,YAAd,+BACA,+BACE,uBAAO0B,KAAK,OAAOC,YAAY,SAAS3B,UAAU,aAAa4B,SAdlD,SAACC,GACpBnB,EAAUmB,EAAEC,OAAOC,eAgBhBV,EAAcW,KAAI,SAACT,GAAD,OACjB,cAAC,EAAD,CAEE9B,KAAM8B,EAAK9B,KACXC,MAAO6B,EAAK7B,MACZC,OAAQ4B,EAAK5B,OACbI,UAAWwB,EAAKU,WAChBrC,MAAO2B,EAAKW,cACZpC,YAAayB,EAAKY,4BAClBtC,OAAQ0B,EAAKa,cAPRb,EAAKc,WCxBLC,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAEnB,IADL2B,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a51dec20.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Coin = ({\r\n  name, image, symbol, price, volume, priceChange, marketcap,\r\n}) => (\r\n  <div className=\"coin-container\">\r\n    <div className=\"coin-row\">\r\n      <div className=\"coin\">\r\n        <img src={image} alt=\"crypto\" />\r\n        <h1>{name}</h1>\r\n        <p className=\"coin-symbol\">{symbol}</p>\r\n      </div>\r\n      <div className=\"coin-data\">\r\n        <p className=\"coin-price\">\r\n          $\r\n          {price}\r\n        </p>\r\n        <p className=\"coin-volume\">\r\n          $\r\n          {volume.toLocaleString()}\r\n        </p>\r\n        {priceChange < 0 ? (\r\n          <p className=\"coin-percet red\">\r\n            { priceChange.toFixed(2)}\r\n            %\r\n          </p>\r\n        ) : (\r\n          <p className=\"coin-percet green\">\r\n            {priceChange.toFixed(2)}\r\n            %\r\n          </p>\r\n        )}\r\n        <p className=\"coin-marketcap\">\r\n          {' '}\r\n          Mkt Cap: $\r\n          {marketcap.toLocaleString()}\r\n        </p>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Coin;\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Coin from './Coin';\r\n\r\n// https://api.coingecko.com/api/v3/coins/markets?vs_currency=sek&order=market_cap_desc&per_page=100&page=1&sparkline=false\r\n\r\nfunction App() {\r\n  const [coins, setCoins] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n\r\n  useEffect(() => {\r\n    axios.get('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false')\r\n      .then((res) => {\r\n        setCoins(res.data);\r\n        console.log(res.data);\r\n      }).catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    setSearch(e.target.value);\r\n    const foo = 'bar';\r\n  };\r\n\r\n  const filteredCoins = coins\r\n    .filter((coin) => coin.name.toLowerCase()\r\n      .includes(search.toLowerCase()));\r\n\r\n  return (\r\n    <div className=\"coin-app\">\r\n      <div className=\"coin-search\">\r\n        <h1 className=\"coin-text\">Search a currency</h1>\r\n        <form>\r\n          <input type=\"text\" placeholder=\"Search\" className=\"coin-input\" onChange={handleChange} />\r\n        </form>\r\n      </div>\r\n      {filteredCoins.map((coin) => (\r\n        <Coin\r\n          key={coin.id}\r\n          name={coin.name}\r\n          image={coin.image}\r\n          symbol={coin.symbol}\r\n          marketcap={coin.market_cap}\r\n          price={coin.current_price}\r\n          priceChange={coin.price_change_percentage_24h}\r\n          volume={coin.total_volume}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}